*   $D  249  $D
*  365  $I
              ADDR_TEMP LITERALLY '62',
*    $D  535  $D  $I
         ENTRY_POINT || ' BYTES OF CODE GENERATED.');
*   $D  1245..1249  $D
*  1297  $I
 GET_STOR_LEN: PROCEDURE (OPERAND) FIXED;
      DECLARE OPERAND BIT(16);
      DO CASE MASK(OPERAND);
         /*   SY TABLE PTR   */
         RETURN STORAGE_LENGTH(OPERAND);
         /*   IMMEDIATE   */
         RETURN 0;
         /*   TRIPLE   */
         DO;
            /*   IF OPERAND IS AN INDEX TRIPLE, THE STORAGE LENGTH MAY BE
                 CONTAINED IN AN S_LENGTH TRIPLE IMMEDIATELY FOLLOWING  */
            IF IS_TRIPLE(OPERAND,INDEX) | IS_TRIPLE(OPERAND,ADDR_TEMP) THEN
            DO;
               IF TRIPLES((OPERAND & STRIPMASK) + 3) = S_LENGTH THEN DO;
                  OPERAND = (OPERAND & STRIPMASK) + 4;
                  RETURN SHL(TRIPLES(OPERAND),16) + TRIPLES(OPERAND + 1);
               END;
            END;
            /*   SET STORAGE LENGTH FROM LENGTH FIELD   */
            RETURN (SHR(TRIPLES(OPERAND & STRIPMASK),8)& "FF") + 1;
         END;
         /*   TRIPLE   */
         DO;
            /*   IF OPERAND IS AN INDEX TRIPLE, THE STORAGE LENGTH MAY BE
                 CONTAINED IN AN S_LENGTH TRIPLE IMMEDIATELY FOLLOWING  */
            IF IS_TRIPLE(OPERAND,INDEX)  | IS_TRIPLE(OPERAND,ADDR_TEMP) THEN
            DO;
               IF TRIPLES((OPERAND & STRIPMASK) + 3) = S_LENGTH THEN DO;
                  OPERAND = (OPERAND & STRIPMASK) + 4;
                  RETURN SHL(TRIPLES(OPERAND),16) + TRIPLES(OPERAND + 1);
               END;
            END;
            /*   SET STORAGE LENGTH FROM LENGTH FIELD   */
            RETURN (SHR(TRIPLES(OPERAND & STRIPMASK),8)& "FF") + 1;
         END;
      END;
 END GET_STOR_LEN;


*   1300  $I
      DECLARE TEMP BIT(16);
*  1366  $I
         IF IS_TRIPLE(OPERAND,ADDR_TEMP) THEN DO;
            /*   TEMP MUST BE DE-REFERENCED   */
            CALL FORCE_INTO_BASE_REG;
            IN_REG, IN_FREE_REG = FALSE;
            OP_STORAGE_LENGTH = GET_STOR_LEN(OPERAND);
         END;
*   1386  $I
         IF IS_TRIPLE(OPERAND,ADDR_TEMP) THEN DO;
            /*   TEMP MUST BE DE-REFERENCED   */
            CALL FORCE_INTO_BASE_REG;
            /*   REMEMBER THE BASE_REG FOR FUTURE REFERENCE   */
            IN_REG = FALSE;
            CALL REASSIGN_TEMP(BASE_REG,TRIPLES((OPERAND & STRIPMASK) + 2));
            OP_STORAGE_LENGTH = GET_STOR_LEN(OPERAND);
         END;
*  1397  $I
              (BASE_REG1,X_REG1) BIT(16),
*  $D  1398  $D
*   $D  1428  $D  $I
      OP_STORAGE_LENGTH =
         (SHR (TRIPLES(LAST_INDEX_TRIPLE),8) & "FF" ) + 1;
*   $D  1454..1456  $D  $I
      IF X_REG ¬= 0 THEN CALL LOAD_ADDRESS;
*   $D  1485..1486  $D
*  $D  1512  $D  $I
           IT CAN BE DE-REFERENCED AGAIN.                     */
*   $D  1514..1517  $D  $I
      IF (BASE_REG = CURRENT_AR_BASE | BASE_REG = GLOBAL_AR_BASE) & X_REG = 0
         THEN RETURN;   /*   NO NEED TO SAVE ADDRESS- CAN BE SIMPLY RECOMPUTED*/
      CALL LOAD_ADDRESS;
      PRIORITY(BASE_REG) = TEMP_PRIORITY;
      CALL ASSIGN_TEMP(BASE_REG);
*   $D  1518  $D  $I
      TRIPLES(LAST_INDEX_TRIPLE + 2) = LAST_TEMP;
*  $D  1520..1521  $D  $I
          LINE NUMBER BIT AND LENGTH FIELD     */
      TRIPLES(LAST_INDEX_TRIPLE) = ADDR_TEMP +
         (TRIPLES(LAST_INDEX_TRIPLE) & "FF80");
*  $D  1561  $D  $I
                  (TRIPLES(LAST_INDEX_TRIPLE) & "FF80");
*    $D  1729  $D  $I
      CALL EMIT_RX(BC,BR_COND,X_REG,CODE_BASE,
         (CODE_INDEX + RELATIVE_DISPL) MOD 4096 );
*   1807   $I
      DECLARE TEMP BIT(16);
*  $D  1816  $D  $I
         IF IS_TRIPLE(OPERAND,INDEX) | IS_TRIPLE(OPERAND,ADDR_TEMP)
            THEN RETURN;
*   $D  1826  $D  $I
         IF IS_TRIPLE(OPERAND,INDEX) | IS_TRIPLE(OPERAND,ADDR_TEMP)
            THEN RETURN;
*  $D  1834..1871  $D
*   1872  $I
 ACCUMULATE: PROCEDURE(OPERAND);
      DECLARE OPERAND BIT(16);
      /*   LOADS THE CURRENTLY ADDRESSED OPERAND INTO AN ACCUMULATOR. IF THE OP
           IS A VALUE TEMP (AS OPPOSED TO AN ADDR_TEMP WHICH MUST BE
           DE-REFERENCED) THE REGISTER PRIORITY IS INCREASED TO TEMP_PRIORITY
           AND ASSOCIATED WITH THE TEMPORARY   */
         CALL GET_OP_INTO_REG(FREE_PRIORITY);
         IF ¬IS_TRIPLE(OPERAND,ADDR_TEMP) & ¬IS_TRIPLE(OPERAND,INDEX)
            & MASK(OPERAND) = TEMP_MASK THEN
            CALL REASSIGN_TEMP(ACC,TRIPLES((OPERAND & STRIPMASK) + 2));
 END ACCUMULATE;

*   $D  1882  $D  $I
         IF IS_TRIPLE(OPERAND,INDEX) | IS_TRIPLE(OPERAND,ADDR_TEMP)
            THEN RETURN FALSE;
*   $D  1917  $D  $I
         CALL ACCUMULATE(OPERAND);
*   $D  1921  $D  $I
         CALL EMIT_RX(HALFWORD_INSTR,ACC1,BASE_REG,X_REG,DISPL);
*   $D   1968  $D  $I
         CALL ACCUMULATE(OP1);
*   $D  1982  $D  $I
         CALL ACCUMULATE(OP1);
*   $D  2008..2009  $D
*  2035  $I
            IF IMMEDIATE THEN
            DO;   /*   FOLD FOR IMMEDIATE OPERANDS-NO NEED FOR COND BRANCH  */
               IF (BR_COND = BE & DISPL = 0) | (BR_COND = BNE & DISPL ¬= 0 )
                  THEN CALL LOCAL_BRANCH(UNCOND,OP1);
               RETURN;
            END;

*   $D  2039  $D  $I
               CALL ACCUMULATE(OP2);
*   $D  2060  $D  $I
         IF ¬IN_REG THEN DO;
            CALL GET_OP_INTO_FLT_REG(FREE_PRIORITY);
            IF MASK(OP1) = TEMP_MASK THEN
               CALL REASSIGN_TEMP(FLT_REG,TRIPLES((OP1 & STRIPMASK) + 2));
         END;
*   $D  2127..2130  $D  $I
      IF X_REG ¬= 0 THEN CALL LOAD_ADDRESS;
*  2134  $I
         BASE_REG = BASE_REG2;
*  $D  2136  $D
*  $D  2138..2140  $D  $I
      CALL MAKE_TARGET_ADDR;
*  $D  2327  $D  $I
            CALL EMIT_RX(MVI,SHR(DISPL2,4),DISPL2 & "F",BASE_REG,DISPL);
*   $D 2904  $D  $I
            OP_STORAGE_LENGTH = (SHR(TRIPLES(CURRENT_TRIPLE),8) & "FF" ) + 1;
*   2908  $I
               BASE_REG1 = BASE_REG;
               BASE_REG = STACKTOP;
*  2910  $I
               IF X_REG ¬= 0 THEN CALL LOAD_ADDRESS;
*  $D  2912..2913  $D  $I
               CALL EMIT_SS(MVC,OP_STORAGE_LENGTH - 1,BASE_REG,DISPL,
                  BASE_REG1,DISPL1);
*   $D  3181  $D  $I
         CALL ACCUMULATE(OP2);
*  $D  3640  $D  $I
         CALL EMIT_RR(MER,FLT_REG-#GP_REGS,FLT_REG-#GP_REGS);
*  3922  $I
      ENTRY_POINT = ENTRY_POINT + CODE_INDEX;   /* SAVE # CODE BYTES GENERATED*/
*
*
*
