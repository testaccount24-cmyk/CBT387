*  $D  449..450  $D  $I
      "85", "3F", "04", "02", "3F", "04", "01", "04", "01", "79", "02", "9C",
      "79", "05", "01", "5F", "85", "3F", "04", "03", "7D", "3F", "05", "05",
*  $D 473  $D  $I
   DECLARE EQUIVALENT(NT) FIXED INITIAL(0,0,5,0,18,2,0,19,20,0,0,0,0,0,0,0,0,0,
*   $D   485   $D   $I
  DECLARE CASE_LIST BIT(16) INITIAL(91);
  DECLARE CASE_LIST_2 BIT(16) INITIAL(115);
*   $D   552   $D   $I
            RPARENT, EQUALSIGN, RBRACKET) BIT(16);
*   $D   556   $D   $I
           ERROR_PROD LITERALLY '213';
*     $D  571  $D $I
      0, 0, 0, 192, 25, 5, 23, 183, 0, 0, 15, 17, 16, 0, 0, 0, 0,
*     $D  631  $D $I
           (CURRENT_LEVEL, PROC_LEVEL) FIXED;
*     $D  638  $D $I
   DECLARE STACKSIZE LITERALLY '75',
           FORESTSIZE LITERALLY '200';
*     $D  650  $D $I
           SUBTREE_STACK(FORESTSIZE) BIT(16),
*   $D   659   $D   $I
   DECLARE TABLE_LENGTH LITERALLY '725';
*     $D  735  $D $I
   DECLARE (IS_FORWARD_DECL, IS_SCALAR_TYPE_DEFN) BIT(1);
*     750  $I
           DEFN_LABEL  BIT(16) INITIAL (11),
*   815   $I
   /* #_PRODS IS THE NUMBER OF PRODUCTIONS IN THE INTERNAL GRAMMAR */
   DECLARE #_PRODS LITERALLY '81';

   /* LEFT HAND SIDES IN INTERNAL FORM OF GRAMMAR */
   DECLARE LEFT_PART(#_PRODS) CHARACTER INITIAL('', '<PROGRAM>', '<BLOCK>',
      '<STATEMENT LIST>', '<LABEL DECL>', '<CONST DECL>', '<TYPE DEFN>',
      '<PROC DECL LIST>', '<PROC DECL>', '<PROC DECL>', '<BODY>',
      '<VAR DECL LIST>', '<VAR DECL>', '<STATEMENT>', '<STATEMENT>',
      '<STATEMENT>', '<STATEMENT>', '<STATEMENT>', '<STATEMENT>', '<STATEMENT>',
      '<STATEMENT>', '<STATEMENT>', '<STATEMENT>', '<STATEMENT>', '<STATEMENT>',
      '<FORMAL PARAM>', '<FORMAL PARAM>', '<FORMAL PARAM>', '<CASE INSTANCE>',
      '<EXPRESSION>', '<EXPRESSION>', '<EXPRESSION>', '<EXPRESSION>',
      '<EXPRESSION>', '<EXPRESSION>', '<EXPRESSION>', '<EXPRESSION>',
      '<EXPRESSION>', '<EXPRESSION>', '<EXPRESSION>', '<EXPRESSION>',
      '<EXPRESSION>', '<EXPRESSION>', '<EXPRESSION>', '<EXPRESSION>',
      '<EXPRESSION>', '<EXPRESSION>', '<EXPRESSION>', '<EXPRESSION>',
      '<EXPRESSION>', '<EXPRESSION>', '<VARIABLE>', '<VARIABLE>', '<QUALIFIER>',
      '<QUALIFIER>', '<QUALIFIER>', '<QUALIFIER>', '<CONSTANT>', '<CONSTANT>',
      '<TYPE>', '<TYPE>', '<TYPE>', '<TYPE>', '<TYPE>', '<TYPE>', '<TYPE>',
      '<TYPE>', '<FIXED FIELD LIST>', '<VARIANT FIELD>', '<VARIANT INSTANCE>',
      '<STATEMENT>', '<TYPE>', '<TYPE>', '<TYPE>', '<TYPE>', '<ELEMENT>',
      '<ELEMENT>', '<PARAM TYPES>', '<PARAM TYPES>', '<PARAM TYPES>',
      '<PARAM TYPES>', '<ERROR>');

*     $D 839 $D $I
      DECLARE TP FIXED INITIAL (0);
*     $D 843 $D $I
      IF TEXT_LIMIT ¬= TP | CARD_COUNT ¬= PREVIOUS_ERROR THEN DO;
*     $D 849 $D $I
      TP = TEXT_LIMIT;
*   $D   857   $D   $I
         ELSE
            DO;
               SEVERE_ERRORS = SEVERE_ERRORS + 1;
               MONITOR_LINK(2) = 0;   /* DEBUG LEVEL <--- 0 */
            END;
*   894   $I
UNDERLYING_TYPE:
   PROCEDURE (TP) BIT(16);
      DECLARE TP BIT(16);
      DO WHILE TP > #_PREDECLARED & DATATYPE(TP) ¬= TP;
         TP = DATATYPE(TP);
         END;
      RETURN TP;
   END UNDERLYING_TYPE;

*   $D   898..900   $D   $I
      DECLARE NSP BIT(16);
      IS_NO_CYCLE:
         /* CHECKS FOR POSSIBLE CYCLIC DATATYPE CHAINS */
         PROCEDURE (T1, T2) BIT(1);
            DECLARE (T1, T2) BIT(16);
            DO WHILE T2 > #_PREDECLARED & DATATYPE(T2) ¬= T2;
               T2 = DATATYPE(T2);
               IF T1 = T2 THEN RETURN FALSE;
               END;
            RETURN TRUE;
         END IS_NO_CYCLE;

         NSP = NODE_STACKSIZE;
         DO WHILE IS_ARRAY_OR_FILE_TYPE(NSP);
            NSP = NSP - 1;
*   $D   902   $D   $I
         IF ¬IS_DECLARATION_NODE(NSP) THEN RETURN;
*   914   $I
                  IF IS_NO_CYCLE (ID_PTR, LAST_LITERAL_SCANNED) THEN
*   915   $I
                  ELSE CALL ERROR ('CYCLIC TYPE DECLARATION', 1);
*   $D   919   $D   $I
         ELSE DO SP = SUBTREE_INDEX(NSP) TO SUBTREE_STACKSIZE;
*   $D   1307   $D
*   $D   1321   $D   $I
          DGNS#_GOTO = DGNS#_STACK2(DGNS#_DEPTH+1) & (DGNS#_TOP1 ¬= OF$);
*   1348   $I
          IF DGNS#_TOP1 = OF$ THEN DGNS#_PTR = FALSE; /* SET BY NEXT CASELABEL*/
*   $D   1453..1454   $D   $I
                  TEXT = V(EOFILE) || '(*''(**)/**/' || V(EOFILE);
*   1689   $I
               IF LENGTH(BCD) + CP > 256 THEN
                  DO;
                     CALL ERROR(LSTRNGM, 1);
                     RETURN;
                  END;
*   1871   $I
                  TEXT_LIMIT = LENGTH(TEXT) - 1;
*   1924   $I
                  TEXT_LIMIT = LENGTH(TEXT) - 1;
*   1935   $I
            /* CASE 13 -- LEFT BRACKET */
            DO;
               TOKEN = LBRACKET;
               CP = CP + 1;
               RETURN;
            END;

            /* CASE 14 -- RIGHT BRACKET */
            DO;
               TOKEN = RBRACKET;
               CP = CP + 1;
               RETURN;
            END;

*   2007   $I
      RBRACKET = LOCATE_INDEX('.)');
*   2054   $I
      CHARTYPE("AD") = 13;   /* LBRACKET */
      CHARTYPE("BD") = 14;   /* RBRACKET */
*     2130  $I
         OUTPUT = SUBSTR(X70, 0, 34) || 'RELEASE 1, UPDATE 4';
*     2221  $I
      /* CHECK FOR UNDEFINED LABELS  */
      DO I = #_PREDECLARED + 1 TO N_DECL_SYMB;
         IF (VAR_TYPE(I) = LABLE) & (N_LOOKUPS(I) > 0) THEN
            CALL ERROR (IDENTITY(I) || ' DECLARED ON LINE ' ||
                        WHERE_DECL(I) || ' IS AN UNDEFINED LABEL', 1);
         END;

*   2245   $I
      I = FIRST_LITERAL;
      DO WHILE I ¬= NULL;
         I, VALUE(I) = SYMB_LINK(I);
      END;
*     $D  2257  $D $I
            'UNDEFINE', 'UNDF LAB', '        ', 'LABEL   ', 'VARIANT ',
*   2305   $I
PARSE_TREE_DUMP:
   PROCEDURE (TREE);
      DECLARE A(127) BIT(16);   /* AUXILIARY STACK; CF KNUTH V.1 P.317 */
      DECLARE TREE BIT(16);   /* POINTER TO ROOT */
      DECLARE (TOP_OF_A,M,C,P) BIT(16);
      DECLARE LEAF LITERALLY 'PARSE_TREE(P+1)',
              MULTIPLICITY LITERALLY 'PARSE_TREE',
              PRODUCTION_NUMB LITERALLY 'PARSE_TREE(P+1)',
              LINE_NUMB LITERALLY 'PARSE_TREE(P+M+2)';
      DECLARE MARGIN CHARACTER;
      DECLARE INDENTATION BIT(16), (S1, S2) CHARACTER;
      DECLARE OVERFLOW_MESSAGE CHARACTER INITIAL(
         '*** AUXILIARY STACK OVERFLOW, PARSE TREE DUMP ABORTED');
      MARGIN = X70 || X70 || '|';
      INDENTATION = LENGTH(MARGIN) - 2;
      TOP_OF_A = 0;
      P = TREE;
      OUTPUT = 'PARSE_TREE AT THIS POINT IS:';
      DO FOREVER;
         IF P = NULL THEN
            DO;
               M = 0;
               S1 = '... EMPTY PRODUCTION ...';
            END;
         ELSE
            DO;
               M = MULTIPLICITY(P);
               IF M = 0 THEN
                  DO;
                     IF LEAF < N_ANONYMOUS_SYMB THEN
                        S1 = IDENTITY(LEAF);
                     ELSE IF (DATATYPE(LEAF)=INTPTR) | (DATATYPE(LEAF)=REALPTR)
                        THEN S1 = VALUE(LEAF);
                     ELSE
                        DO;
                           S1 = ' ';
                           BYTE(S1) = VALUE(LEAF) & "FF";
                        END;
                  END;
               ELSE S1 = PRODUCTION_NUMB || X1 || LEFT_PART(PRODUCTION_NUMB);
            END;
         S2 = SUBSTR(MARGIN,INDENTATION) || X1 || S1;
         IF LENGTH(S2) < 57 THEN S2 = S2 || X70;
         IF LENGTH(S2) < 127 THEN S2 = S2 || SUBSTR(X70,0,127 - LENGTH(S2));
         S1 = I_FORMAT(LINE_NUMB,4);
         IF P = NULL THEN S1 = '';
         OUTPUT = S2 || '|' || S1;
         IF M > 0 THEN
            DO;
               A(TOP_OF_A) = 0;
               TOP_OF_A = TOP_OF_A + 1;
               IF TOP_OF_A > 127 THEN
                  DO;
                     OUTPUT = OVERFLOW_MESSAGE;
                     RETURN;
                  END;
            END;
         DO C = - 1 TO M - 3;   /* STACK SUBTREES RIGHT TO LEFT */
            A(TOP_OF_A) = PARSE_TREE(P + M - C);
            TOP_OF_A = TOP_OF_A + 1;
            IF TOP_OF_A > 127 THEN
               DO;
                  OUTPUT = OVERFLOW_MESSAGE;
                  RETURN;
               END;
         END;
         IF M = 0 THEN
            DO;   /* UNSTACK SUBTREE */
               IF TOP_OF_A = 0 THEN RETURN;
               TOP_OF_A = TOP_OF_A - 1;
               P = A(TOP_OF_A);
               DO WHILE P = 0;
                  IF TOP_OF_A = 0 THEN RETURN;
                  INDENTATION = INDENTATION + 3;
                  TOP_OF_A = TOP_OF_A - 1;
                  P = A(TOP_OF_A);
               END;
            END;
         ELSE
            DO;    /* PREPARE TO DUMP LEFTMOST SUBTREE */
               P = PARSE_TREE(P + 2);
               INDENTATION = INDENTATION - 3;
            END;
      END;
   END PARSE_TREE_DUMP;

*   $D   2352..2361   $D
*   $D   2377..2382   $D
*     $D  2408  $D $I
         IF VAR_TYPE(ID_PTR) = FORWARD THEN  DO;
*     2409 $I
            PROCMARK(CURRENT_LEVEL) = N_DECL_SYMB;
            END;
*   $D   2410   $D   $I
         ELSE BLOCK_STACK(CURRENT_LEVEL) = VALUE(UNDERLYING_TYPE(ID_PTR));
*   2426   $I
        IF CONTROL(BYTE('Z')) THEN
*     $D  2529  $D $I
      DECLARE ENTER_LEVEL BIT(16);
      ENTER_LEVEL = CURRENT_LEVEL;
      IF IS_DECLARATION THEN
         IF IS_SCALAR_TYPE_DEFN THEN
            DEPTH, ENTER_LEVEL = PROC_LEVEL;
         ELSE DEPTH = CURRENT_LEVEL;
*     $D  2532  $D $I
      IF IS_SCALAR_TYPE_DEFN THEN L = ENTER_LEVEL; ELSE L = CURRENT_LEVEL;
*     $D  2537  $D $I
               N_LOOKUPS(INDEX) = N_LOOKUPS(INDEX) + 1;
*     $D  2555  $D $I
      INDEX = ENTER_SYMBOL (ID, ENTER_LEVEL);
*     $D  2576 2577  $D $I
            IF VAR_TYPE(INDEX) ¬= LABLE & VAR_TYPE(INDEX) ¬= DEFN_LABEL THEN DO;
               CALL ERROR ('UNDECLARED LABEL ' || ID, 0);
               VAR_TYPE(INDEX)= LABLE;
              END;
*   $D   2619..2620   $D   $I
   IF I = 0 THEN J = NULL;
   ELSE
      DO;
         J = GET_NODE(I);
         PARSE_TREE(J + 1) = NODE_STACK(NODE_STACKSIZE);
      END;
*   $D   2632   $D
*   2635   $I
BUILD_ERROR_TREE:
   PROCEDURE;
      /* FORCE AN ERROR SUBTREE ONTO THE SUBTREE STACK */
      CALL STACK_NODE(ERROR_NODE);
      SUBTREE_STACKSIZE = SUBTREE_STACKSIZE + 1;
      SUBTREE_STACK(SUBTREE_STACKSIZE) = NULL;
      CALL UNSTACK;
   END BUILD_ERROR_TREE;

*   $D   2642   $D   $I
            IF VAR_TYPE(UNDERLYING_TYPE(LAST_LITERAL_SCANNED)) = RECORD THEN
*   2667   $I
      IF CONTROL(BYTE('P')) THEN
         CALL PARSE_TREE_DUMP(SUBTREE_STACK(SUBTREE_STACKSIZE));
*   2681   $I
      DECLARE FI FIXED INITIAL (241), IFF FIXED INITIAL (17);
*   2682   $I
      DECLARE TYPE_ID_MARKER BIT(16);
*   2808   $I
               TYPE_ID_MARKER = N_DECL_SYMB;
*   2821   $I
               DO I = TYPE_ID_MARKER TO N_DECL_SYMB - 1;
                  IF VAR_TYPE(I) = UNDEFINED THEN
                     DO;
                        CALL ERROR(IDENTITY(I) || ' IS AN UNDECLARED TYPE', 0);
                        VAR_TYPE(I) = TYPE;
                     END;
               END;
*     $D  2895  $D $I
            IS_DECLARATION, IS_SCALAR_TYPE_DEFN = FALSE;
*     2907  $I
               VARTYPECODE = UNDEFINED;
*     $D  2909 2910 $D $I
               IF VAR_TYPE(LAST_LITERAL_SCANNED) ¬= LABLE THEN
                  IF VAR_TYPE(LAST_LITERAL_SCANNED) = UNDEFINED THEN
                     CALL ERROR ('UNDECLARED LABEL ' || BCD, 0);
                  ELSE CALL ERROR ('DUPLICATE DEFINITION OF ' || BCD, 1);
               VAR_TYPE(LAST_LITERAL_SCANNED) = DEFN_LABEL;
*   $D   2936   $D   $I
            CALL STACK_NODE(FI);
*   $D   3024   $D   $I
            IF IS_PROC_CALL THEN
               IS_PROC_CALL = FALSE;
            ELSE
               DO;   /* WE PREDICTED AN ASSIGNMENT */
                  NODE_STACKSIZE = NODE_STACKSIZE - 1;
                  NODE_STACK(NODE_STACKSIZE) = 15;   /* PROC CALL */
               END;
*   $D   3034..3041   $D   $I
 ELSE_PART: DO;
               DO WHILE (NODE_STACK(NODE_STACKSIZE) ¬= FI)
                        & (NODE_STACKSIZE > 0);
                     CALL UNSTACK;
                  END;
               NODE_STACK(NODE_STACKSIZE) = IFF;
            END;
*   $D   3044   $D   $I
            GOTO ELSE_PART;
*     3063  $I
               IF VAR_TYPE(LAST_LITERAL_SCANNED) = FORWARD THEN
                  CALL ERROR(IDENTITY(LAST_LITERAL_SCANNED) ||
' IS FORWARD DECLARED. REPETITION OF ITS PARAMETER LIST IS NOT ALLOWED', 1);
*   $D   3135..3139   $D   $I
               DO WHILE (NODE_STACK(NODE_STACKSIZE) ¬= 28)
                        & (NODE_STACKSIZE > 0);
                  CALL UNSTACK;
*   $D   3151..3155   $D   $I
               DO WHILE (NODE_STACK(NODE_STACKSIZE) ¬= 28)
                        & (NODE_STACKSIZE > 0);
                  CALL UNSTACK;
*     3221  $I
               PROC_LEVEL = CURRENT_LEVEL;
      RPT:     I = VAR_TYPE(SYMB_BLOCK_OWNER(PROC_LEVEL));
               IF (I ¬= PROC) & (I ¬= FORWARD) THEN DO;
                  IF PROC_LEVEL > 1 THEN PROC_LEVEL = PROC_LEVEL - 1;
                  IS_SCALAR_TYPE_DEFN = TRUE;
                  GOTO RPT;
                  END;
*   $D   3499..3501   $D   $I
               IF NODE_STACK(NODE_STACKSIZE) ¬= LPARENT THEN
                  CALL UNSTACK;
               ELSE
                  NODE_STACKSIZE = NODE_STACKSIZE - 1;
*   $D   3604   $D
*   $D   3773   $D   $I
      CALL BUILD_ERROR_TREE;
*   $D   3775   $D   $I
      CALL BUILD_ERROR_TREE;
*   $D   3777   $D   $I
      CALL BUILD_ERROR_TREE;
*   $D   3779   $D   $I
      CALL BUILD_ERROR_TREE;
*   $D   3783   $D   $I
      CALL BUILD_ERROR_TREE;
*   $D   3785   $D   $I
      CALL BUILD_ERROR_TREE;
*   $D   3787   $D   $I
      CALL BUILD_ERROR_TREE;
*   $D   3799   $D   $I
      DO;
         CALL STACK_NODE(FI);
         CALL BUILD_ERROR_TREE;
      END;
*   $D   3801..3806   $D   $I
      CALL BUILD_ERROR_TREE;
*     $D  3862  $D $I
            IF SUBTREE_STACKSIZE >= FORESTSIZE THEN
*     $D  3964..3971  $D $I

      J = -1;
*     3979  $I
            IF T = RIGHT_PAREN THEN RIGHT_PAREN_OK = TRUE;
*     $D  3997  $D  4005  $I
      #_EXPECTED_TOKENS = J + 1;
      IF #_EXPECTED_TOKENS = 1 THEN TOKEN_EXPECTED = TOKENS_OUT;
*     $D 4046..4053  $D $I
 IS_EXPECTED:  PROCEDURE (T, S) BIT(1);
      DECLARE (T, S, I, STACK_TOKEN) BIT(16);
      DO FOREVER;
         STACK_TOKEN = PARSE_STACK(S);
         IF STACK_TOKEN <= NT THEN RETURN (STACK_TOKEN = T);
         /* ELSE INSPECT THE TERMINAL HEADS OF STACK_TOKEN */
         DO I = TERMINAL_HEADS_INDEX(STACK_TOKEN - NT1)
                TO TERMINAL_HEADS_INDEX(STACK_TOKEN - NT1+ 1) - 1;
            IF TERMINAL_HEADS(I) = T THEN RETURN TRUE;
            END;
         IF PRODUCES_EMPTY(STACK_TOKEN - NT1) THEN S = S - 1;
         ELSE RETURN FALSE;
         END;
*     $D  4074  $D $I
       DO WHILE COMPILING &
                ¬(IS_CATCH_SYMBOL(TOKEN) | IS_EXPECTED(TOKEN, SP));
*     4076  $I
       IF ¬IS_EXPECTED(SEMI_COLON, SP) THEN
*     $D 4131 $D $I
           IF IS_EXPECTED (TOKEN, SP) THEN RETURN;
*     $D  4139  $D $I
               CALL SYNTHESIZE (PR#(PARSE_STACK(SP) - NT1));
*     $D  4141  $D $I
               OUTPUT = '*** PRODUCTION #  ' || PR#(PARSE_STACK(SP)- NT1) ||
*     $D  4173  $D $I
       OUTPUT = '***        TOKEN SUPPLIED IS   ' || V(I) || '   ***';
*     $D 4185 $D $I
       IF IS_EXPECTED (EQUIVALENT(TOKEN), SP) THEN DO;
*     $D   4198 4199   $D   $I
             OUTPUT = '***        PROBABLE MISSPELLING OF A KEYWORD.  TOKEN ASSU
MED TO BE ' || V(TOKEN) || '   ***';
*     $D 4209 $D $I
       IF IS_EXPECTED (TOKEN, SP-1) THEN DO;
*     $D  4212  $D $I
           ELSE CALL SYNTHESIZE (PR#(PARSE_STACK(SP) - NT1));
*     $D  4220 4221  $D $I
               OUTPUT = '***        A SEMICOLON CANNOT PRECEDE ''ELSE''   ***';
*   $D   4223..4224   $D   $I
           IF STACKTOP = CASE_LIST THEN DO;
               CALL STACK_NODE(28);   /* CASE INSTANCE */
               CALL BUILD_ERROR_TREE;   /* FOR CASE LABEL */
               PARSE_STACK(SP) = CASE_LIST_2;
               SP = SP + 1;
               PARSE_STACK(SP) = STATEMENT;
           END;
           CALL GET_TOKEN;
*     $D  4257  $D $I
       /* IF SOFT_RECOVER FAILS ... */
       CALL STACK_NODE (ERROR_NODE);
       SUBTREE_STACKSIZE = SUBTREE_STACKSIZE + 1;
       SUBTREE_STACK(SUBTREE_STACKSIZE) = NULL;
*     $D  4259  $D $I
       CALL UNSTACK;
       IF IS_EXPECTED (TOKEN, SP) THEN RETURN;
*     $D  4292  4293  $D $I
               CALL ERROR ('ONE OF THE FOLLOWING SYMBOLS WAS EXPECTED:', 0);
               CALL DIAGNOSE_ERROR;
*   4297   $I
   /*
*   4307   $I
      CALL INLINE("58",2,0,STACKTOP);            /* L    2,STACKTOP        */
      CALL INLINE("5B",2,0,NT1);                 /* S    2,NT1             */
      CALL INLINE("41",3,0,2,1);                 /* LA   3,1(0,2)          */
      CALL INLINE("8D",2,0,0,1);                 /* SLDL 2,1               */
      CALL INLINE("48",1,2,ENTRIES);             /* LH   1,ENTRIES(2)      */
      CALL INLINE("48",2,3,ENTRIES);             /* LH   2,ENTRIES(3)      */
      CALL INLINE("06",2,0);                     /* BCTR 2,0               */
      CALL INLINE("58",0,0,TOKEN);               /* L    0,TOKEN           */
      CALL INLINE("1B",3,3);                     /* SR   3,3               */
      CALL INLINE("05",12,0);                    /* BALR 12,0              */
      CALL INLINE("19",1,2);                     /* CR   1,2               */
      CALL INLINE("47",2,0,12,66);               /* BH   66(0,12)          */
      CALL INLINE("43",3,1,INIT);                /* IC   3,INIT(1)         */
      CALL INLINE("19",0,3);                     /* CR   0,3               */
      CALL INLINE("47",4,0,12,66);               /* BL   66(0,12)          */
      CALL INLINE("43",3,1,FIN);                 /* IC   3,FIN(1)          */
      CALL INLINE("19",0,3);                     /* CR   0,3               */
      CALL INLINE("47",2,0,12,60);               /* BH   60(0,12)          */
      CALL INLINE("18",2,0);                     /* LR   2,0               */
      CALL INLINE("43",3,1,INIT);                /* IC   3,INIT(1)         */
      CALL INLINE("1B",2,3);                     /* SR   2,3               */
      CALL INLINE("1A",1,1);                     /* AR   1,1               */
      CALL INLINE("4A",2,1,PTR);                 /* AH   2,PTR(1)          */
      CALL INLINE("43",3,2,PROD_#);              /* IC   3,PROD_#(2)       */
      CALL INLINE("50",3,0,PRODUCTION_NUMBER);   /* ST   3,PRODUCTION_NUMBER */
      CALL INLINE("41",3,0,0,1);                 /* LA   3,1               */
      CALL INLINE("42",3,0,FOUND_PROD);          /* STC  3,FOUND_PROD      */
      CALL INLINE("47",15,0,12,66);              /* B    66(0,12)          */
      CALL INLINE("41",1,0,1,1);                 /* LA   1,1(0,1)          */
      CALL INLINE("07",15,12);                   /* BR   12                */
*
*
