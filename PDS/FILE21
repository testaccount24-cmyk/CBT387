*   $D   32..36   $D
*   $D   39   $D   $I
   DECLARE TABLE_LENGTH LITERALLY '725';
*   $D   68..69   $D
*   $D   74   $D
*   $D   145..146   $D   $I
   DECLARE TRIPLES(3599) BIT(16);                 /* SMALL-CORE VERSION */

   /* THE PARSE TREE */
   DECLARE PARSE_TREE(7200) BIT(16);
   DECLARE MULTIPLICITY LITERALLY 'PARSE_TREE';
   DECLARE TREE_SIZE FIXED;
*   163   $I
   /* LAST_TRIPLE IS SET EQUAL TO (N_TRIPLES - 3) | MASK_TRIPLE THROUGHOUT
      COMPILATION. */
   DECLARE LAST_TRIPLE BIT(16);

*   $D   182   $D   $I
      0, 3,3,10,3,3, 3,0,3,3,4, 3,3,0,6,7, 0,7,7,1,1, 7,7,0,0,0, 0,0,0,0,0,
*   $D   184   $D   $I
      0,0,5,0,5, 2,0,0,0,0, 5,0,5,2,7, 7,0,0,12,0, 13);
*   $D   224..235   $D
*   $D   245   $D   $I
   DECLARE WITH_PTR BIT(16) INITIAL (NUL);
*   $D   269..279   $D   $I
   DECLARE STATEMENT      LITERALLY '0',
           SCALAR         LITERALLY '1',
           SUBRANGE       LITERALLY '2',
           POINTER        LITERALLY '3',
           ARRAY          LITERALLY '4',
           PACKED_ARRAY   LITERALLY '5',
           FILE           LITERALLY '6',
           PACKED_FILE    LITERALLY '7',
           RECORD         LITERALLY '8',
           PACKED_RECORD  LITERALLY '9',
           STANDARD       LITERALLY '10',
*   $D   492   $D   $I
         ELSE IF FIELDWIDTH > LENGTH(XTEMP) THEN
            LINE = LINE || SUBSTR(X70, 0, FIELDWIDTH - LENGTH(XTEMP));
*   $D   510..511   $D
*   $D   524   $D   $I
  ST LENGTH   S_LIST      VALUE  PSEUDO_REG    DISP';
*   $D   531..614   $D
*   $D   892   $D   $I
      /* IN SMALL-CORE VERSION, TRIPLES OVERLAPS WITH PARSE_TREE */
      IF N_TRIPLES + 3*(NEW_LINE_TRIPLE + 1) > 3600 + NODE THEN
*   910   $I
      LAST_TRIPLE = N_TRIPLES | MASK_TRIPLE;
*   1003   $I
      IF SEVERE_ERRORS + MONITOR_LINK(3) > 0 THEN RETURN;
*   $D   1022   $D   $I
               DO I = 1 TO (STORAGE_LNGTH(DATA_PTR) + INDEX - 1)/80;
*   1062   $I
      DO I = INTFIELDSIZEPTR TO DECIMAL_PLACESPTR;
         /* THESE VARIABLES DO NOT APPEAR IN DUMP */
         VAR_TYPE(I) = LITERAL;
      END;
*   $D   1067   $D   $I
            PSEUDO_REG(I) = NULL;
*   $D   1075   $D   $I
                        DATATYPE(I) = PSEUDO_REG(DATATYPE(I));
*   $D   1080   $D   $I
                  RELOCATION_INDEX, PSEUDO_REG(I) = RELOCATION_INDEX + 1;
*   $D   1083   $D   $I
            ELSE PSEUDO_REG(I) = NULL;
*   $D   1094   $D   $I
                        DATATYPE(I) = PSEUDO_REG(DATATYPE(DATATYPE(I)));
*   $D   1105   $D   $I
                                 DATATYPE(I) = PSEUDO_REG(CHARPTR);
*   $D   1107   $D   $I
                        ELSE DATATYPE(I) = PSEUDO_REG(DATATYPE(I));
*   $D   1111   $D   $I
                  RELOCATION_INDEX, PSEUDO_REG(I) = RELOCATION_INDEX + 1;
*   $D   1121   $D   $I
            ELSE PSEUDO_REG(I) = NULL;
*   $D   1128   $D   $I
                  RELOCATION_INDEX, PSEUDO_REG(I), DATATYPE(I) =
*   $D   1131   $D   $I
            ELSE PSEUDO_REG(I) = NULL;
*   $D   1137   $D   $I
                  RELOCATION_INDEX, PSEUDO_REG(I) = RELOCATION_INDEX + 1;
*   $D   1143   $D   $I
                        DATATYPE(I) = PSEUDO_REG(DATATYPE(I));
*   $D   1147   $D   $I
            ELSE PSEUDO_REG(I) = NULL;
*   $D   1150   $D   $I
      DATATYPE(FALSEPTR), DATATYPE(TRUEPTR) = PSEUDO_REG(BOOLPTR);
*   $D   1154   $D   $I
         IF PSEUDO_REG(I) ¬= NULL THEN
*   $D   1194..1204   $D
*   $D   1238..1239   $D   $I
      ELSE CALL ERROR('SYMBOL TABLE OVERFLOW', 1);
*   1324   $I
      HIGHBOUND = HIGHBOUND & (STORAGE_LNGTH(TYPE) ¬= MAXINT);
*   $D   1331   $D   $I
            OPND, OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   1338   $D   $I
                                LAST_TRIPLE, 0);
*   $D   1340   $D   $I
                                   LAST_TRIPLE, 0);
*   $D   1347   $D   $I
                             LAST_TRIPLE, 0);
*   $D   1387   $D   $I
                        ELSE IF LOW1 ¬= 0 THEN
*   $D   1390..1392   $D   $I
                                 FINDCONST(LOW1), 3);
                              OPND2, OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   1394..1399   $D
*   $D   1436   $D   $I
                        OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   1456   $D   $I
                  OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   1474   $D   $I
                  OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   1503   $D   $I
            CALL EMIT_TRIPLE(MOVE, LAST_TRIPLE, OPND2, 0);
*   $D   1521   $D   $I
                     OPERAND#STK(#OP) = LAST_TRIPLE;
*   1525   $I
            ELSE IF ACTUAL = EMPTYSETPTR THEN
               DO;
                  CALL EMIT_TRIPLE(TEMP, NULL, 0, STORAGE_LNGTH(FORMAL) - 1);
                  ACTUAL, OPERAND#STK(#OP) = LAST_TRIPLE;
                  CALL EMIT_TRIPLE(XOR, ACTUAL | MASK_TEMP, ACTUAL | MASK_TEMP,
                                   0);
               END;
*   $D   1538   $D   $I
                        OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   1555   $D   $I
                  OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   1577   $D   $I
                  OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   1605..1606   $D   $I
                  OPND1, OPERAND#STK(#OP - 1) = LAST_TRIPLE;
*   $D   1617..1618   $D   $I
                  OPND2, OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   1667   $D   $I
                  I = LAST_TRIPLE | MASK_TEMP;
*   $D   1671..1672   $D   $I
                  CALL EMIT_TRIPLE(MOVE, LAST_TRIPLE, OPND1, 0);
*   $D   1691   $D   $I
            OPERAND#STK(#OP - 1) = LAST_TRIPLE;
*   $D   1697   $D   $I
            OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   1715   $D   $I
            OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   1732..1733   $D   $I
            IF STORAGE_LNGTH(TYPE_PTR) > 32768 THEN SL = 4;
            ELSE IF STORAGE_LNGTH(TYPE_PTR) <= 256 THEN SL = 1;
*   1803   $I
      HALFWORD_DISP(LEVEL) = 0;
*   $D   1806..1843   $D
*   1872   $I
      DECLARE ERROR_EXIT LABEL;
*   $D   1916   $D   $I
               OPERAND#STK(#OP - 1) = LAST_TRIPLE;
*   $D   1923   $D   $I
               CALL EMIT_TRIPLE(AND, LAST_TRIPLE | MASK_TEMP, OPND2, 0);
*   $D   1927   $D   $I
               CALL EMIT_TRIPLE(OPCD, LISTHEAD, LAST_TRIPLE, 0);
*   $D   1929   $D   $I
               OPERAND#STK(#OP - 1) = LAST_TRIPLE;
*   1962   $I
         IF MONITOR_LINK(3) + SEVERE_ERRORS > 0 THEN RETURN;
*   $D   1991   $D   $I
         OPERAND#STK(#OP) = LAST_TRIPLE;
*   2013   $I
         #TP = PARSE_TREE(NODE#STACK(NP) + 2);
*   $D   2047   $D   $I
                     OPERAND#STK(#OP - 1) = LAST_TRIPLE;
*   $D   2104   $D   $I
            CALL EMIT_TRIPLE(BNZ, LISTHEAD, LAST_TRIPLE, 0);
*   $D   2106..2107   $D   $I
            CALL EMIT_TRIPLE(BNZ, LISTHEAD, LAST_TRIPLE, 0);
         ELSE CALL EMIT_TRIPLE(BZ, LISTHEAD, LAST_TRIPLE, 0);
*   $D   2110   $D   $I
         OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   2121   $D   $I
         CALL EMIT_TRIPLE(BNZ, LISTHEAD, LAST_TRIPLE, 0);
*   $D   2231..2232   $D   $I
                                 CALL EMIT_TRIPLE(TPOP, LAST_TRIPLE, NULL, 0);
*   $D   2235   $D   $I
                           ELSE OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   2246   $D   $I
                           OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   2255..2256   $D   $I
                     ELSE OPERAND#STK(#OP) = LAST_TRIPLE;
                     CALL EMIT_TRIPLE(MONITOR, LAST_TRIPLE,
*   $D   2263..2264   $D
*   $D   2303..2304   $D   $I
                                 CALL EMIT_TRIPLE(TPOP, LAST_TRIPLE, NULL, 0);
*   $D   2310   $D   $I
                                 OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   2328   $D   $I
                     OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   2341   $D   $I
                     OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   2346   $D   $I
                     CALL EMIT_TRIPLE(ODD, OPERAND#STK(#OP), NULL, 3);
*   $D   2349   $D   $I
                     OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   2358   $D   $I
                     OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   2394   $D   $I
                     OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   2401..2403   $D   $I
                     CALL EMIT_TRIPLE(MONITOR, LAST_TRIPLE, NULL,
                                      MONITOR_CODE(ID_PTR));
                     OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   2416   $D   $I
                     OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   2435..2437   $D   $I
                     CALL EMIT_TRIPLE(MONITOR, LAST_TRIPLE, NULL,
                                      MONITOR_CODE(ID_PTR));
                     OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   2447   $D   $I
                     CALL EMIT_TRIPLE(MONITOR, LAST_TRIPLE,
*   $D   2479..2480   $D   $I
                        CALL EMIT_TRIPLE(STORE, TABLE_PTR, LAST_TRIPLE, 0);
*   $D   2520   $D   $I
                        CALL EMIT_TRIPLE(INDEX, LAST_TRIPLE,
*   $D   2534   $D   $I
                        I = LAST_TRIPLE;
*   $D   2609   $D   $I
                              FIX_LIST(NP) = LAST_TRIPLE;
*   2618   $I
                              ELSE #OP = #OP - 1;
*   $D   2625   $D   $I
                              FIX_LIST(NP) = LAST_TRIPLE;
*   $D   2653   $D   $I
                           OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   2691   $D   $I
                              FIX_LIST(NP) = LAST_TRIPLE;
*   2700   $I
                              ELSE #OP = #OP - 1;
*   $D   2707   $D   $I
                              FIX_LIST(NP) = LAST_TRIPLE;
*   $D   2741   $D   $I
                                 CALL EMIT_TRIPLE(ADD, LAST_TRIPLE,
*   $D   2743   $D   $I
                                 TABLE_PTR = LAST_TRIPLE;
*   $D   2835   $D   $I
                           LAST_TRIPLE, 0);
*   $D   2843   $D   $I
                              OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   2846   $D   $I
                        OPERAND#STK(#OP) = LAST_TRIPLE;
*   2891   $I
   IS_RECOVERY_PRODUCTION:
      PROCEDURE (PROD#) BIT(1);
         DECLARE PROD# BIT(16);
         IF (PROD# < 0) | (PROD# > 11) THEN RETURN FALSE;
         RETURN (SHL(1,PROD#) & "(1)1 11100 01111 0") ¬= 0;
      END IS_RECOVERY_PRODUCTION;

*   $D   2900   $D   $I
               IF NODE = NULL THEN
                  DO;
                     FIRST_VISIT = FALSE;
                     TABLE_PTR = NULL;
                  END;
*   $D   2931   $D   $I
                              FIX_LIST(NP + 1) = LAST_TRIPLE;
*   3028   $I
                           IS_DECLARATION = FALSE;
*   3057   $I
                        /* CASE 13 -- ERROR PRODUCTION */
                        DO;
                           DO WHILE ¬IS_RECOVERY_PRODUCTION(FATHERS_PROD_NO);
                              CALL FATHER;
                           END;
                           CALL RIGHT_BRO;
                           GOTO ERROR_EXIT;
                        END;
*   $D   3060   $D   $I
      ERROR_EXIT: END;
*   $D   3135..3136   $D   $I
                           DO;   /* <CONSTANT> IS A STRING */
                              STRUCTYPE(ID_PTR) = ARRAY;
                              STORAGE_LNGTH(ID_PTR) = STORAGE_LNGTH(TABLE_PTR);
                           END;
*   $D   3175   $D   $I
                              STACK_LIMIT(CURRENT_LEVEL) =
                                 STORAGE_LNGTH(TABLE_PTR);
                              ARRAYS_ALLOCATED(CURRENT_LEVEL),
                                 HALFWORD_DISP(CURRENT_LEVEL) = 0;
*   $D   3199..3201   $D   $I
                              STORAGE_LNGTH(TABLE_PTR) =
                                 STACK_LIMIT(CURRENT_LEVEL);
*   $D   3231..3232   $D   $I
                              STORAGE_LNGTH(OWNER_STACK(CURRENT_LEVEL)) =
                                 STACK_LIMIT(CURRENT_LEVEL);
*   3239   $I
                     IF CURRENT_LEVEL < 1 THEN RETURN;
*   $D   3249   $D   $I
                           IF SEVERE_ERRORS + MONITOR_LINK(3) = 0 THEN
                              CALL WRITE_TRIPLES;
*   $D   3342   $D   $I
                              LISTHEAD = LAST_TRIPLE;
*   $D   3348   $D   $I
                              OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   3363   $D   $I
                              OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   3367   $D   $I
                        CALL FIXUP(LISTHEAD, LAST_TRIPLE);
*   $D   3404   $D   $I
                              OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   3406   $D   $I
                        IF FATHERS_MULTIPLICITY = 1 THEN
                           DO;   /* EMPTY CASE LIST */
                              CALL EMIT_TRIPLE(TPOP, OPERAND#STK(#OP), NULL, 0);
                              #OP = #OP - 1;
                           END;
                        ELSE IF STRUCTYPE(#TP) = SUBRANGE THEN
*   $D   3412..3413   $D   $I
                                    OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   3420..3421   $D   $I
                                       LAST_TRIPLE, 0);
                                    FIX_LIST(NP) = LAST_TRIPLE;
*   $D   3428..3429   $D   $I
                                       LAST_TRIPLE, 0);
                                    FIX_LIST(NP) = LAST_TRIPLE;
*   $D   3439..3440   $D   $I
                                    OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   3444..3445   $D   $I
                                       LAST_TRIPLE, 0);
                                    FIX_LIST(NP) = LAST_TRIPLE;
*   $D   3453..3454   $D   $I
                                       LAST_TRIPLE, 0);
                                    FIX_LIST(NP) = LAST_TRIPLE;
*   $D   3458..3469   $D   $I
                        IF FATHERS_MULTIPLICITY > 1 THEN
                           DO;
                              TABLE_PTR = NEXT_FREE_ROW;
                              DATATYPE(TABLE_PTR) = DATATYPE(#TP);
                              STRUCTYPE(TABLE_PTR) = SUBRANGE;
                              VAR_TYPE(TABLE_PTR) = TYPE;
                              VALUE(TABLE_PTR) = MAX;
                              STORAGE_LNGTH(TABLE_PTR) = MAX - MIN + 1;
                              CALL EMIT_TRIPLE(CASE_JUMP, OPERAND#STK(#OP),
                                               TABLE_PTR, 0);
                              OPERAND#STK(#OP) = (N_TRIPLES - 3);
                              DO I = MIN TO MAX;
                                 CALL EMIT_TRIPLE(BCH, NULL, NULL, 0);
                              END;
                           END;
*   $D   3474   $D   $I
                        FIX_LIST(NP) = LAST_TRIPLE;
*   $D   3494   $D   $I
                              CALL FIXUP(LISTHEAD, LAST_TRIPLE);
*   $D   3498   $D   $I
                        CALL FIXUP(FIX_LIST(NP), LAST_TRIPLE);
*   $D   3514   $D   $I
                              LISTHEAD = LAST_TRIPLE;
*   $D   3520   $D   $I
                              OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   3545   $D   $I
                              LISTHEAD = LAST_TRIPLE;
*   $D   3619   $D   $I
                              OPERAND#STK(#OP) = LAST_TRIPLE | MASK_TEMP;
*   $D   3637..3638   $D   $I
                                                   LAST_TRIPLE, NULL, 3);
*   $D   3653   $D   $I
                                                   LAST_TRIPLE,
*   $D   3657..3658   $D   $I
                                                LAST_TRIPLE, NULL, 3);
*   $D   3675..3676   $D   $I
                                                   LAST_TRIPLE, NULL, 3);
*   $D   3687   $D   $I
                                                   LAST_TRIPLE,
*   $D   3690..3691   $D   $I
                                                   LAST_TRIPLE, NULL, 3);
*   $D   3702..3703   $D   $I
                                                   LAST_TRIPLE, NULL, 3);
*   $D   3707   $D   $I
                              OPERAND#STK(#OP - 1) = LAST_TRIPLE | MASK_TEMP;
*   $D   3716   $D   $I
                                 LAST_TRIPLE, 0);
*   $D   3762   $D   $I
                                 LAST_TRIPLE | MASK_TEMP;
*   $D   3902   $D   $I
                              CASE_PTR = LAST_TRIPLE;
*   $D   3944..3945   $D   $I
                                 OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   3964..3965   $D   $I
                                 OPERAND#STK(#OP) = LAST_TRIPLE;
*   3981   $I
                           LAST_TRIPLE = (N_TRIPLES - 3) | MASK_TRIPLE;
*   $D   3996..3997   $D   $I
                                 OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   4003   $D   $I
                           OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   4082   $D   $I
                              ID_PTR = LAST_TRIPLE;
*   $D   4090..4091   $D   $I
                              CALL EMIT_TRIPLE(BNZ, LINK, LAST_TRIPLE, 0);
*   $D   4101..4102   $D   $I
                              CALL EMIT_TRIPLE(BZ, LISTHEAD, LAST_TRIPLE, 0);
*   $D   4132..4133   $D   $I
                                       OPERAND#STK(#OP - 1) = LAST_TRIPLE;
*   $D   4135   $D   $I
                                          LAST_TRIPLE | MASK_TEMP,
*   $D   4143   $D   $I
                              OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   4172   $D   $I
                                          LAST_TRIPLE | MASK_TEMP,
*   4180   $I
                           ELSE CALL ERROR('ILLEGAL "-" OPERATOR', 1);
*   $D   4184   $D   $I
                              OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   4220   $D   $I
                                                        NULL, 0);
*   $D   4221   $D   $I
                                       CALL FIXUP(LISTHEAD, LAST_TRIPLE);
*   $D   4228   $D   $I
                              OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   4237   $D   $I
                                    CALL EMIT_TRIPLE(BCH_TARGET, NULL, NULL, 0);
*   $D   4238   $D   $I
                                    CALL FIXUP(I, LAST_TRIPLE);
*   $D   4284..4285   $D   $I
                                       OPERAND#STK(#OP - 1) = LAST_TRIPLE;
*   $D   4287   $D   $I
                                          LAST_TRIPLE | MASK_TEMP,
*   $D   4295   $D   $I
                              OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   4308   $D   $I
                           OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   4322   $D   $I
                           OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   4336   $D   $I
                           OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   4393..4394   $D
*   4396   $I
                                 SL = VALUE(#TP) & "FFFFFFF8";
                                 SL = (SL/8) - I + 1;
                                 STORAGE_LNGTH(ID_PTR) = SL;
*   $D   4490   $D   $I
                           FIX_LIST(NP) = LAST_TRIPLE;
*   $D   4507..4508   $D   $I
                                    OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   4540   $D   $I
                              IF ¬PARAMLIST | (FATHERS_MULTIPLICITY > 1) THEN
*   $D   4549..4550   $D   $I
                                    OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   4574..4575   $D   $I
                                    CALL EMIT_TRIPLE(INDEX, LAST_TRIPLE,
*   4604   $I
                              ELSE IF STRUCTYPE(TABLE_PTR) = ARRAY THEN
                                 DO;   /* A STRING CONSTANT */
                                    #TP = TABLE_PTR;
                                    CALL REPLACE(#TP);
                                 END;
*   $D   4647..4648   $D   $I
                                 OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   4653   $D   $I
                           OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   4678   $D   $I
                           OPERAND#STK(#OP) = LAST_TRIPLE;
*   $D   4712..4713   $D   $I
                                    OPERAND#STK(#OP) = LAST_TRIPLE;
*   4801   $I
                  IF VAR_TYPE(TABLE_PTR) ¬= CONSTANT THEN
                     CALL ERROR('LOWBOUND OF SUBRANGE TYPE MUST BE A CONSTANT',
                                1);
*   4812   $I
                  IF VAR_TYPE(TABLE_PTR) ¬= CONSTANT THEN
                     CALL ERROR('HIGHBOUND OF SUBRANGE TYPE MUST BE A CONSTANT',
                                1);
*   $D   4821..4822   $D   $I
                  IF I <= 0 THEN DO;
                     IF I + MAXINT > VALUE(TABLE_PTR) THEN
*   $D   4824   $D   $I
                     ELSE
                        DO;
                           CALL ERROR('CARDINALITY OF SUBRANGE > MAXINT', 0);
                           SL = MAXINT;
                        END;
*   $D   4826..4829   $D   $I
                  ELSE SL = VALUE(TABLE_PTR) - I + 1;
*   $D   4918..4921   $D
*   $D   4928   $D
*   5018   $I
                           IF (STRUCTYPE(TABLE_PTR) = SUBRANGE)
                              & (STORAGE_LNGTH(TABLE_PTR) > 32768) THEN
                              CALL ERROR('CARDINALITY OF TAGFIELD TYPE > 32768',
                                 1);
*   5025   $I
                        IF TABLE_PTR ¬= NULL THEN
*   $D   5029   $D   $I
                     ELSE IF TABLE_PTR ¬= NULL THEN
*   $D   5031   $D   $I
                           I, ID_PTR = PARSE_TREE(NODE#STACK(NP) + 2);
*   $D   5037   $D   $I
                           ID_PTR = I; /* POINTS TO TAGFIELD */
*   $D   5089   $D   $I
                     ELSE IF TABLE_PTR ¬= NULL THEN
*   $D   5205..5208   $D   $I
                  ;
*   5226   $I
      DECLARE FP FIXED;
*   $D   5235   $D   $I
      CP, FP = 1;   /* CP POINTS TO CURRENT CHARACTER,
                       FP POINTS TO FIRST CHARACTER */
*   $D   5238..5243   $D   $I
         IF (S1 = BYTE('''')) & (S2 = S1) THEN
            DO;
               BCD = BCD || SUBSTR(SY_TEXT, FP, CP - FP);
               S2 = BYTE(' ');
               FP = CP + 1;
            END;
*   5247   $I
               IF CP > FP THEN BCD = BCD || SUBSTR(SY_TEXT, FP);
*   $D   5249..5250   $D   $I
               TEXT_LIMIT = LENGTH(SY_TEXT) - 1;
               CP, FP = 0;
*   5253   $I
      IF CP > FP THEN BCD = BCD || SUBSTR(SY_TEXT, FP, CP - FP);
*   $D   5323..5324   $D
*   $D   5328   $D
*   $D   5448   $D
*   $D   5511   $D   $I
         I = VALUE(I);
*   $D   5517   $D
*   $D   5528..5544   $D   $I
      IF SEVERE_ERRORS + MONITOR_LINK(3) = 0 THEN
         DO;   /* NO SEVERE ERRORS WERE ENCOUNTERED */
            CALL WRITE_SYMBOLS;
            OUTPUT(5) = COREIM_DESCRIPT(ADDR(DATA_BYTES), 80);
            CALL REWIND(TRUE, 5);
            IF MONITOR_LINK(2) > 0 THEN   /* DEBUG LEVEL > 0 */
               CALL PREPARE_POST_MORTEM_TABLES;
         END;
      ELSE   /* THERE WERE SEVERE ERRORS */
         DO;
            MONITOR_LINK(0) = NULL;   /* ABORT COMPILATION */
            CALL PRINT_COMPILE_TIME;
         END;
*
*
